Installation instructions:

    Prerequisites:
        * 64bit Linux distribution/64bit Windows with Intel OpenCL installed that supports cl_intel_subgroups extension. Suitable Linux OpenCL driver should be a part of 
            Intel Media Server Studio. Windows OpenCL driver can be update via Intel Driver Update Utility (part of intel.com) 
        * Intel OpenCL SDK 
        * cmake 
        * GCC or ICC compiler (Linux) , MSVC C++ or ICC compilers (Windows) 
        * Haswell class CPU and/or GPU on target platform.

    Building steps:
        1)  * Linux: Set env variable pointing to where Intel OpenCL SDK is eg. export INTELOCLSDKROOT=/opt/intel/opencl   (default setup)
            * Windows: SDK exports/sets INTELOCLSDKROOT by itself
        2)  Go into intel_visual_cloud_node and to generate makefiles we need to run selected shell file in either way:
            * Linux:
                ./create_unixmake_gcc.sh  (this will trigger building and running of Unit tests)
                or:
                RUN_ULTS_OFFLINE=on ./create_unixmake_gcc.sh  (this will trigger building without running of Unit tests)
            * Windows:
                create_msvc_icc.bat (this will trigger building and running of Unit tests)
                or:
                set RUN_ULTS_OFFLINE=on & create_msvc_icc.sh       (this will trigger building without running of Unit tests)
        3)  Go Into newly created UnixMk and waned configuration dire g.
            a)  First build DebugULT (debug build with Unit tests to make sure everything is fine):
                * Linux:  cd UnixMk/DebugULT; make
                * Windows: Open sln (eg. look into MSVC_icc for sln) file in Visual studio and have BUILD_ALL completed.
                then test ULT:
                - In case building machine and target are the same (you are to run this project on the same machine you are to build it on) simply execute: ./bin/tester/g_ult/DebugULT/ult_gpu     
                - In case when building machine is different from target machine then copy ./bin/tester/g_ult/DebugULT/ult_gpu to target and then run it there.
            You should see quite a lot of input (all should take couple of minutes) and there should be PASS at the very end of output. If not something is missing 
            in configuration of platform. When you have it all running go to point b) to build release build
            b) For release: 
                * Linux:  cd UnixMk/Release; make
                * Windows: Open sln (eg. look into MSVC_icc for sln) file in Visual studio and have BUILD_ALL completed.

Frequently asked Questions:

1. What is recommended platform to run IDLF:
    - Iris Pro 5200 (for device GPU)
    - Xeon E5 (for device CPU)

2. Will device GPU work on different Haswell flavors?
    Yes it does work on other HSW configurations. We tested it on:
    -  HSW GT3e
    -  HSW GT2

    Should work on any HSW if only good enough OpenCL driver is installed.

3. I copy ult_gpu / ult_cpu to my target platform and I cannot have it running due to some GLIBC problems?
   - Both Linuces (build host and target) should be compatible enough so that
   Glibc (C library ) on host is not newer than on target eg. if you build our framework (or any other linux app) on
   Newer system and then intend to run it on much older Linux OS, you may encounter problems. 

